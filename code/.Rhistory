beta_ridge <- Y / (1 + lambda_vals)
beta_lasso <- ifelse(Y > lambda_vals / 2, Y - lambda_vals / 2,
ifelse(Y < -lambda_vals / 2, Y + lambda_vals / 2, 0))
plot(lambda_vals, beta_ridge, type = "l", col = "blue", ylim = c(0,1),
ylab = "Estimated Coefficient", xlab = "Lambda", main = "Ridge vs Lasso Estimates")
lines(lambda_vals, beta_lasso, col = "red")
legend("topright", legend = c("Ridge", "Lasso"), col = c("blue", "red"), lty = 1)
help("rnorm")
x <- rnorm(100)
x
set.seed(1234)
x <- rnorm(100)
error <- rnorm(100)
x_poly <- data.frame(poly(x,10, raw = T))
View(x_poly)
data <- data.frame(Y, x_poly)
library(leaps)
x_poly <- data.frame(poly(x,10, raw = T))
data <- data.frame(Y, x_poly)
best_fit <- regsubsets(Y ~., data = data, nvmax = 10)
summary(best_fit)
best_fit
best_fit$cp
summary_best_fit <- summary(best_fit)
summary_best_fit$cp
summary_best_fit$bic
View(data)
plot(summary_best_fit$cp)
library(leaps)
X_poly <- data.frame(poly(X, 10, raw = TRUE))  # X, X^2, ..., X^10
library(leaps)
X_poly <- data.frame(poly(x, 10, raw = TRUE))  # X, X^2, ..., X^10
data <- data.frame(Y, X_poly)
best_fit <- regsubsets(Y ~ ., data = data, nvmax = 10)
summary_best <- summary(best_fit)
plot(summary_best$cp, xlab = "Number of Predictors", ylab = "Cp", type = "l")
library(leaps)
X_poly <- data.frame(poly(x, 10, raw = TRUE))  # X, X^2, ..., X^10
data <- data.frame(Y, X_poly)
best_fit <- regsubsets(Y ~ ., data = data, nvmax = 10)
summary_best <- summary(best_fit)
plot(summary_best$cp, xlab = "Number of Predictors", ylab = "Cp", type = "l")
set.seed(1234)
x <- rnorm(100)
error <- rnorm(100)
beta0 <- 1
beta1 <- 2
beta2 <- 3
beta3 <- 4
Y <- beta0 + beta1*X + beta2*X^2 + beta3*X^3 + error
beta0 <- 1
beta1 <- 2
beta2 <- 3
beta3 <- 4
Y <- beta0 + beta1*x + beta2*x^2 + beta3*x^3 + error
library(leaps)
x_poly <- data.frame(poly(x,10, raw = T))
data <- data.frame(Y, x_poly)
best_fit <- regsubsets(Y ~., data = data, nvmax = 10)
summary_best_fit <- summary(best_fit)
plot(summary_best_fit$cp)
summary_best_fit$bic
summary_best_fit$bic
plot(summary_best_fit$cp)
library(leaps)
x_poly <- data.frame(poly(x,10, raw = T))
data <- data.frame(Y, x_poly)
best_fit <- regsubsets(Y ~., data = data, nvmax = 10)
summary_best_fit <- summary(best_fit)
plot(summary_best_fit$cp)
plot(summary_best_fit$bic)
plot(summary_best_fit$adjr2)
fwd <- regsubsets(Y ~., data=data, nvmax = 10, method = "forward")
bwd <- regsubsets(Y ~., data=data, nvmax = 10, method = "backward")
fwd
bwd
summary(fwd)
best_fit <- regsubsets(Y ~., data=data, nvmax = 10, method = "forward")
summary_best_fit <- summary(best_fit)
plot(summary_best_fit$cp)
plot(summary_best_fit$bic)
plot(summary_best_fit$adjr2)
best_fit <- regsubsets(Y ~., data=data, nvmax = 10, method = "backward")
summary_best_fit <- summary(best_fit)
plot(summary_best_fit$cp)
plot(summary_best_fit$bic)
plot(summary_best_fit$adjr2)
library(glmnet)
X_matrix <- model.matrix(Y ~ ., data = data)[, -1]
cv_lasso <- cv.glmnet(X_matrix, Y, alpha = 1)
plot(cv_lasso)
coef(cv_lasso, s = "lambda.min")
coef(cv_lasso, s = "lambda.min")
plot(cv_lasso)
coef(cv_lasso, s = "lambda.min")
load("../College.rda")
load("../data/College.rda")
glimspe(College)
library(tidyverse)
glimspe(College)
glimspe(College)
glimpse(College)
load("../data/College.rda")
library(ISLR)
library(tidyverse)
set.seed(123)
train <- sample(1:nrow(College), nrow(College)/2)
test <- setdiff(1:nrow(College), train)
lm_fit <- lm(Apps ~ ., data = College, subset = train)
pred_lm <- predict(lm_fit, newdata = College[test, ])
mean((pred_lm - test_y)^2)
load("../data/College.rda")
library(ISLR)
library(tidyverse)
set.seed(123)
train <- sample(1:nrow(College), nrow(College)/2)
test <- setdiff(1:nrow(College), train)
test_y <- College$Apps[test]
lm_fit <- lm(Apps ~ ., data = College, subset = train)
pred_lm <- predict(lm_fit, newdata = College[test, ])
mean((pred_lm - test_y)^2)
ridge_fit <- cv.glmnet(train_x, train_y, alpha = 0)
load("../data/College.rda")
library(ISLR)
library(tidyverse)
set.seed(1)
train <- sample(1:nrow(College), nrow(College)/2)
test <- setdiff(1:nrow(College), train)
train_x <- model.matrix(Apps ~ ., data = College)[train, -1]
test_x <- model.matrix(Apps ~ ., data = College)[test, -1]
train_y <- College$Apps[train]
test_y <- College$Apps[test]
lm_fit <- lm(Apps ~ ., data = College, subset = train)
pred_lm <- predict(lm_fit, newdata = College[test, ])
mean((pred_lm - test_y)^2)
lm_fit <- lm(Apps ~ ., data = College, subset = train)
pred_lm <- predict(lm_fit, newdata = College[test, ])
mean((pred_lm - test_y)^2)
load("../data/College.rda")
library(ISLR)
library(tidyverse)
set.seed(1234)
train <- sample(1:nrow(College), nrow(College)/2)
test <- setdiff(1:nrow(College), train)
train_x <- model.matrix(Apps ~ ., data = College)[train, -1]
test_x <- model.matrix(Apps ~ ., data = College)[test, -1]
train_y <- College$Apps[train]
test_y <- College$Apps[test]
lm_fit <- lm(Apps ~ ., data = College, subset = train)
pred_lm <- predict(lm_fit, newdata = College[test, ])
mean((pred_lm - test_y)^2)
ridge_fit <- cv.glmnet(train_x, train_y, alpha = 0)
ridge_pred <- predict(ridge_fit, s = ridge_fit$lambda.min, newx = test_x)
mean((ridge_pred - test_y)^2)
lasso_fit <- cv.glmnet(train_x, train_y, alpha = 1)
lasso_pred <- predict(lasso_fit, s = lasso_fit$lambda.min, newx = test_x)
mean((lasso_pred - test_y)^2)
library(pls)
pcr_fit <- pcr(Apps ~ ., data = College, subset = train, scale = TRUE, validation = "CV")
validationplot(pcr_fit, val.type = "MSEP")
pcr_pred <- predict(pcr_fit, newdata = College[test, ], ncomp = 10)
mean((pcr_pred - test_y)^2)
library(pls)
pcr_fit <- pcr(Apps ~ ., data = College, subset = train, scale = TRUE, validation = "CV")
pcr_pred <- predict(pcr_fit, newdata = College[test, ], ncomp = 10)
mean((pcr_pred - test_y)^2)
pls_fit <- plsr(Apps ~ ., data = College, subset = train, scale = TRUE, validation = "CV")
validationplot(pls_fit, val.type = "MSEP")
pls_pred <- predict(pls_fit, newdata = College[test, ], ncomp = 10)
mean((pls_pred - test_y)^2)
library(pls)
pcr_fit <- pcr(Apps ~ ., data = College, subset = train, scale = TRUE, validation = "CV")
validationplot(pcr_fit, val.type = "MSEP")
pcr_pred <- predict(pcr_fit, newdata = College[test, ], ncomp = 10)
mean((pcr_pred - test_y)^2)
Y <- beta0 + 7 * x^7 + error
data2 <- data.frame(Y, poly(x, 10, raw = TRUE))
best_fit2 <- regsubsets(Y ~ ., data = data2, nvmax = 10)
summary_best2 <- summary(best_fit2)
X_matrix2 <- model.matrix(Y ~ ., data = data2)[, -1]
cv_lasso2 <- cv.glmnet(X_matrix2, Y, alpha = 1)
plot(cv_lasso2)
coef(cv_lasso2, s = "lambda.min")
help("tune")
knitr::opts_chunk$set(echo = TRUE)
set.seed(1234)
svm_c <- tune(svm, ECO ~., data = d, ranges = list(seq(0.001, 0.01, 0.1, 1, 10, 100, 1000), kernel = c("linear", "polynomial", "radial", "sigmoid")))
library(e1071)
help("tune")
library(tidyverse)
set.seed(1234)
svm_c <- tune(svm, ECO ~., data = d, ranges = list(seq(0.001, 0.01, 0.1, 1, 10, 100, 1000), kernel = c("linear", "polynomial", "radial", "sigmoid")))
knitr::opts_chunk$set(echo = TRUE)
library(e1071)
library(tidyverse)
load("../data/Auto-3.rda")
attach(Auto)
ECO = ifelse( mpg > 22.75, "Economy", "Consuming")
Auto$ECO <- as.factor(ECO)
rm(ECO)
attach(Auto)
svm <- svm(ECO ~., data = Auto)
svm
plot(weight, horsepower, col = as.numeric(Auto$ECO))
d = data.frame(ECO, weight, horsepower)
svm <- svm(ECO ~., data = d, kernel = "linear")
summary(svm)
plot(svm, data = Auto[, c(4, 5, 10)])
svm_poly <- svm(ECO ~., data = d, kernel = "polynomial")
plot(svm_poly, data = Auto[, c(4, 5, 10)])
svm_s <- svm(ECO ~., data = d, kernel = "sigmoid")
plot(svm_s, data = Auto[, c(4, 5, 10)])
set.seed(1234)
svm_c <- tune(svm, ECO ~., data = d, ranges = list(seq(0.001, 0.01, 0.1, 1, 10, 100, 1000), kernel = c("linear", "polynomial", "radial", "sigmoid")))
set.seed(1234)
svm_c <- tune(svm, ECO ~., data = d, ranges = list(cost = seq(0.001, 0.01, 0.1, 1, 10, 100, 1000), kernel = c("linear", "polynomial", "radial", "sigmoid")))
svm_c <- tune(svm, ECO ~., data = Auto, ranges = list(cost = seq(0.001, 0.01, 0.1, 1, 10, 100, 1000), kernel = c("linear", "polynomial", "radial", "sigmoid")))
set.seed(1234)
svm_c <- tune(svm, ECO ~., data = d, ranges = list(cost = c(0.001, 0.01, 0.1, 1, 10, 100, 1000), kernel = c("linear", "polynomial", "radial", "sigmoid")))
set.seed(123)
SVM_C <- tune(svm, ECCO ~ ., data = d,
ranges = list(cost = c(0.001, 0.01, 0.1, 1, 10, 100, 1000),
kernel = c("linear", "polynomial", "radial",
"sigmoid")))
set.seed(1234)
svm_c <- tune(svm, ECO ~., data = d, ranges = list(cost = c(0.001, 0.01, 0.1, 1, 10, 100, 1000), kernel = "linear"))
View(d)
glimspe(d)
library(tidyverse)
glimpse(d)
svm_c <- tune(svm, ECO ~., data = d, cost = c(0.001, 0.01, 0.1, 1, 10, 100, 1000), kernel = "linear")
set.seed(1234)
svm_c <- tune(svm, ECO ~., data = d, cost = c(0.001, 0.01, 0.1, 1, 10, 100, 1000), kernel = "polynomial")
svm_c <- tune(svm)
svm_c <- tune(svm, ECO ~ ., data = d)
svm <- svm(ECO ~., data = d, kernel = "linear")
svm_c <- tune(svm, ECO ~ ., data = d)
rm(svm)
set.seed(1234)
svm_c <- tune(svm, ECO ~ ., data = d)
svm_c
set.seed(1234)
svm_c <- tune(svm, ECO ~ ., data = d, ranges = list(cost = c(0.001, 0.01, 0.1, 1, 10, 100,
1000), kernel = c("linear", "polynomial", "radial", "sigmoid")))
svm_c
summary(svm_c)
1 - svm_c$performances[svm_c$performances$error == min(svm_c$performances$error),]$error
summary(Auto$ECO)
summary(Auto$mpg)
ECO = ifelse( mpg < 17, "Low Consuming", ECO)
table(ECO)
ECO = ifelse( mpg < 17, "Low Consuming", Auto$ECO)
table(ECO)
ifelse( mpg < 29, "Mid Consuming", "Economy")
Auto$ECO = ifelse( mpg < 17, "Low Consuming",
ifelse( mpg < 29, "Mid Consuming", "Economy"))
Auto$ECO <- as.factor(Auto$ECO)
table(Auto$ECO)
attach(Auto)
plot(weight, horsepower, col = as.numeric(Auto$ECO))
d = data.frame(ECO, weight, horsepower)
svm <- svm(ECO ~., data = d, kernel = "linear")
glimpse(Auto)
glimpse(d)
Auto$ECO = ifelse( mpg < 17, "Low Consuming",
ifelse( mpg < 29, "Mid Consuming", "Economy"))
Auto$ECO <- as.factor(Auto$ECO)
attach(Auto)
plot(weight, horsepower, col = as.numeric(Auto$ECO))
d = data.frame(ECO, weight, horsepower)
svm <- svm(ECO ~., data = d, kernel = "linear")
View(d)
rm(ECO)
d = data.frame(ECO, weight, horsepower)
d = data.frame(ECO, weight, horsepower)
svm <- svm(ECO ~., data = d, kernel = "linear")
summary(svm)
plot(svm, data = Auto[, c(4, 5, 10)])
rm(svm)
set.seed(1234)
svm_c <- tune(svm, ECO ~ ., data = d, ranges = list(cost = c(0.001, 0.01, 0.1, 1, 10, 100,
1000), kernel = c("linear", "polynomial", "radial", "sigmoid")))
summary(svm_c)
1 - svm_c$performances[svm_c$performances$error == min(svm_c$performances$error),]$error
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics("Screenshot 2025-06-17 at 10.31.35 PM.png")
X <- c(0.1, 0.15, 0.2, 0.2, 0.55, 0.6, 0.6,
0.65, 0.7, 0.75)
mean(X)
library(tidyverse)
library(ISLR)
attach(OJ)
OJ <- OJ
glimpse(OJ)
set.seed(123)
train_index <- sample(1:nrow(OJ), 800)
train_data <- OJ[train_index, ]
test_data <- OJ[-train_index, ]
library(tree)
tree_model <- tree(Purchase ~ . ,data = OJ) # except for buy as predictors but dont know which one that is.
summary(tree_model)
tree_model
plot(tree_model)
text(tree_model)
Yhat <- predict(tree_model, newdata = test_data, type = "class")
summary(Yhat)
table(Yhat, test_data$Purchase)
(30+15)/(151+30+15+74)
cv <- cv.tree(tree_model)
cv
cv$size[which.min(cv$dev)]
cv <- cv.tree(tree_model, FUN = prune.misclass)
cv
plot(cv$size, cv$dev, type = "b")
min_index <- which.min(cv$dev)
best_size <- cv$size[min_index]
min_error <- cv$dev[min_index] / nrow(OJ)
best_size
min_error
tr_opt <- prune.tree(tree_model, best =8)
summary(tr_opt)
data <- readRDS("bdi_result_crs.rds")
shiny::runApp('~/Documents/American University/Data Science 613/Homework data science/soccer_app/code/app')
runApp('~/Documents/American University/Data Science 613/Homework data science/soccer_app/code/app')
runApp('~/Documents/American University/Data Science 613/Homework data science/soccer_app/code/Player_Performance_Lab.R')
runApp('~/Documents/American University/Data Science 613/Homework data science/soccer_app/code/app')
runApp('~/Documents/American University/Data Science 613/Homework data science/soccer_app/code/app')
runApp('~/Documents/American University/Data Science 613/Homework data science/soccer_app/code/app')
runApp('~/Documents/American University/Data Science 613/Homework data science/soccer_app/code/app')
runApp('~/Documents/American University/Data Science 613/Homework data science/soccer_app/code/app')
runApp('~/Documents/American University/Data Science 613/Homework data science/soccer_app/code/app')
runApp('~/Documents/American University/Data Science 613/Homework data science/soccer_app/code/Player_Performance_Lab.R')
runApp('~/Documents/American University/Data Science 613/Homework data science/soccer_app/code/app')
runApp('~/Documents/American University/Data Science 613/Homework data science/soccer_app/code/app')
runApp('~/Documents/American University/Data Science 613/Homework data science/soccer_app/code/app')
runApp('~/Documents/American University/Data Science 613/Homework data science/soccer_app/code/app')
runApp('~/Documents/American University/Data Science 613/Homework data science/soccer_app/code/app')
runApp('~/Documents/American University/Data Science 613/Homework data science/soccer_app/code/app')
help("textInput")
runApp('~/Documents/American University/Data Science 613/Homework data science/soccer_app/code/app')
runApp('~/Documents/American University/Data Science 613/Homework data science/soccer_app/code/Player_Performance_Lab.R')
data <- readRDS("bdi_result_crs.rds")
library(visNetwork)
library(tidygraph)
library(dplyr)
# Subsetting to Burundi's 2005 data
bdi_2005 <- data[["edge_lists"]][["2005"]]
# Create a node list of all unique orgs from sender and receiver
nodes <- bdi_2005 %>%
select(id, name = sender, orgtype = sender_orgtype) %>%
bind_rows(
bdi_2005 %>%
select(id, name = receiver, orgtype = receiver_orgtype)
) %>%
distinct(name, .keep_all = TRUE) %>%
mutate(label = name, id = name)  # visNetwork needs 'id' and 'label'
# Creating edge data
edges <- bdi_2005 %>%
mutate(from = sender, to = receiver) %>%
select(from, to, cost, n_contracts)
# Creating visualization
visNetwork(nodes, edges) %>%
visNodes(shape = "dot", scaling = list(min = 10, max = 30)) %>%
visEdges(smooth = TRUE) %>%
visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
visGroups(groupname = "Government", color = "lightblue") %>%
visGroups(groupname = "NGO", color = "lightgreen") %>%
visGroups(groupname = "Private", color = "orange") %>%
visLegend() %>%
visLayout(randomSeed = 123)
data <- readRDS("bdi_result_crs.rds")
library(visNetwork)
library(tidygraph)
library(dplyr)
# Subsetting to Burundi's 2005 data
bdi_2005 <- data[["edge_lists"]][["2005"]]
# Create a node list of all unique orgs from sender and receiver
nodes <- bdi_2005 %>%
select(id, name = sender, orgtype = sender_orgtype) %>%
bind_rows(
bdi_2005 %>%
select(id, name = receiver, orgtype = receiver_orgtype)
) %>%
distinct(name, .keep_all = TRUE) %>%
mutate(label = name, id = name)  # visNetwork needs 'id' and 'label'
# Creating edge data
edges <- bdi_2005 %>%
mutate(from = sender, to = receiver) %>%
select(from, to, cost, n_contracts)
# Creating visualization
visNetwork(nodes, edges) %>%
visNodes(shape = "dot", scaling = list(min = 10, max = 30)) %>%
visEdges(smooth = TRUE) %>%
visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
visGroups(groupname = "Government", color = "lightblue") %>%
visGroups(groupname = "NGO", color = "lightgreen") %>%
visGroups(groupname = "Private", color = "orange") %>%
visLegend() %>%
visLayout(randomSeed = 123)
runApp('~/Documents/American University/Networks of Influence and Support in Peace Operations/code')
runApp('~/Documents/American University/Data Science 613/Homework data science/soccer_app/code/Player_Performance_Lab.R')
View(bdi_2005)
test <- readRDS("bdi_result_crs.rds")
cd ..
pwd
getwd()
setwd("/Users/dgt63/Documents/American University/Stat 627/")
setwd("/Users/dgt63/Documents/American University/Stat 627/Networks of Influence and Support in Peace Operations")
setwd("/Users/dgt63/Documents/American University/")
setwd("/Users/dgt63/Documents/American University/Networks of Influence and Support in Peace Operations")
setwd("/Users/dgt63/Documents/American University/Networks of Influence and Support in Peace Operations/code")
test <- readRDS("../data/bdi_result_crs.rds")
burundi_crs <- readRDS("../data/bdi_result_crs.rds")
burundi_crs_2005 <- data[["edge_lists"]][["2005"]]
library(tidyverse)
burundi_crs_2005 <- burundi_crs_2005 %>%
mutate(country = "burundi")
help("varSelectInput")
runApp()
View(burundi_crs)
View(burundi_crs)
help("selectInput")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help("datatable")
runApp()
runApp()
View(burundi_crs)
runApp()
runApp()
runApp()
help("renderVisNetwork")
runApp()
runApp()
runApp('~/Documents/test_app')
runApp()
visNetwork(nodes, edges)
runApp()
runApp()
burundi_crs <- readRDS("../data/bdi_result_crs.rds")
burundi_crs_2005 <- data[["edge_lists"]][["2005"]]
runApp()
burundi_crs <- readRDS("../data/bdi_result_crs.rds")
burundi_crs_2005 <- burundi_crs[["edge_lists"]][["2005"]]
country <- c("Burundi", "Colombia")
dataframe <- c("CRS", "dataframe2", "dataframe3")
bdi_2005 <- burundi_crs[["edge_lists"]][["2005"]]
# Create a node list of all unique orgs from sender and receiver
nodes <- bdi_2005 %>%
select(id, name = sender, orgtype = sender_orgtype) %>%
bind_rows(
bdi_2005 %>%
select(id, name = receiver, orgtype = receiver_orgtype)
) %>%
distinct(name, .keep_all = TRUE) %>%
mutate(label = name, id = name)  # visNetwork needs 'id' and 'label'
# Creating edge data
edges <- bdi_2005 %>%
mutate(from = sender, to = receiver) %>%
select(from, to, cost, n_contracts)
# Creating visualization
test_viz <- visNetwork(nodes, edges) %>%
visNodes(shape = "dot", scaling = list(min = 10, max = 30)) %>%
visEdges(smooth = TRUE) %>%
visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
visGroups(groupname = "Government", color = "lightblue") %>%
visGroups(groupname = "NGO", color = "lightgreen") %>%
visGroups(groupname = "Private", color = "orange") %>%
visLegend() %>%
visLayout(randomSeed = 123)
View(test_viz)
View(test_viz)
test_viz
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help("sidebarLayout")
runApp()
runApp()
help("fluidPage")
help("fluidRow")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help("downloadButton")
runApp()
runApp()
help("visHierarchicalLayout")
runApp()
runApp()
runApp()
runApp()
runApp()
burundi_crs <- readRDS("../data/bdi_result_crs.rds")
View(burundi_crs)
View(burundi_crs[["edge_lists"]][["2005"]])
runApp()
